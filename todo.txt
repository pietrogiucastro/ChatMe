MANDATORY
- create css themes
- query rooms from db
- fix time display also with days
- transparent chat when mouseleave option
- right spinner everywere (user fa spinners and animations)
- fix user color
- change not sound
- custom background
- auto mute for spam
- message / audio length limit
- fix register display
- google analytics
- audio download button (don't auto download)
- fix runtime pm last message bug for audio and images! (need <icon> + audio / image even when a 
  pm message has been sent)

WHEN MANDATORY'S ARE COMPLETED
- remove youtube/whatsapp match return
- remove server = localhost line when everything done
- start npm with "infinite" on the server
- test server users online number limit

LESS IMPORTANT
- remove rooms if not used anymore
- substitute tab data-name and data-pass with just token
- sort rooms result by relevance
- possibility to delete messages (check if they are mine before);
- fix multi tabs name disappear bug
- my messages history with arrows up and down
- prevent socket to be global
- no connection error handling
- description popover on hover for tabs and buttons
- add password for mongodb login!
- compress media quality
- insert email check on signup
- enter to submit/select everywhere
- search rooms via db
- insert enter + shift to wrap message text
- set ownercolor in pm
- set emoji in cookies and reduce their quality

























_images



I messaggi privati sono gestiti dal db e dall oggetto rooms.

Ogni chat pm è una room di tipo pm nominata in questo modo: pm://id1-id2, dove id1<id2.

Nella history room non avverrà uno slice di -100

La room avrà una chiave "unseen" che avrà un hash di due id, che conterranno i valori di quanti messaggi non sono stati visti (integer)


lato client:
 - aperta la modal della chat, verrano caricate le conversazioni dal server.
 	Se una conversazione avrà messaggi non visti, verrà aggiunta la classe unseen con il numero di messaggi non visti.
 - Cliccata una conversazione, verrà aperta una chat, con relativa scheda, nel pannello
 	principale, e verrà chiamato il server per confermare l'avvenuta lettura dei messaggi.
 - Appena aperta una conversazione, verrà creata la stanza se non ancora creata nel db;
 	altrimenti verrà presa dal db e inserita nell'oggetto rooms
 - Appena inviato un messaggio alla stanza, esso verrà salvato sul db aggiungendo 1 allo stato di unseen dei messaggi dell'altro utente. Appena arrivato il messaggio all'altro utente nella chat (questo vuol dire che è online), verrà riazzerato il suo stato di unseen sul db.

