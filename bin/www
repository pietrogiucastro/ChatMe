#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('chatme:server');
var fs = require('fs');
var path = require('path');
var http = require('http');
var https = require('https');
var anchorme = require('anchorme').default;
var guid = require('uuid').v4;
var CryptoJS = require("crypto-js");
var sharp = require("sharp");

var environment = require('../environment')();

/* 
// Encrypt 
var ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123');
 
// Decrypt 
var bytes  = CryptoJS.AES.decrypt(ciphertext.toString(), 'secret key 123');
var plaintext = bytes.toString(CryptoJS.enc.Utf8);*/


var db = require('../db/mongoose.js');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(environment.port || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var sslcert = 

 environment.env == 'prd' ?
    {
        key: fs.readFileSync('/etc/letsencrypt/live/chatme.me/privkey.pem'),
        cert: fs.readFileSync('/etc/letsencrypt/live/chatme.me/fullchain.pem')
    }
 :
    {
        key: fs.readFileSync('./devcert/key.pem'),
        cert: fs.readFileSync('./devcert/cert.pem')
    };

 server = https.createServer(sslcert, app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
        case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
        default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind + ' mode: ' + process.env.NODE_ENV);
}

var connectedSockets = {};
var history = {};
var io = require('socket.io').listen(server);
var ss = require('socket.io-stream');
var r_global = 'global';

var rooms = {};
var customrooms = [];

var status = {
    online: {
        message: 'Online',
        classname: 'isonline'
    },
    offline: {
        message: 'Offline',
        classname: 'isoffline'
    },
    busy: {
        message: 'Busy',
        classname: 'isbusy'
    },
    afk: {
        message: 'AFK',
        classname: 'isafk'
    },
    toilet: {
        message: 'Toilet!',
        classname: 'istoilet'
    },
};

var color = {
    default: 'darkgreen',
    red: 'red',
    green: 'darkgreen',
    blue: 'blue',
    black: 'black',
    yellow: 'yellow',
    orange: 'orange',
    skyblue: 'skyblue'
};

function elabMessage(msg) {
    msg = msg.replace(/</g, '&lt').replace(/>/g, '&gt').trim();
    msg = anchorme(msg, {
        attributes: [{
            name: "target",
            value: "_blank"
        }]
    });
    return msg;
}

db.getRooms(function(err, dbrooms) {
    if (err || !dbrooms) {
        console.log('ERROR! Can\'t get rooms!');
        console.log(err);
        return;
    }
    rooms = dbrooms.rooms;
    customrooms = dbrooms.customrooms;
    io.sockets.on('connection', startChatMe);
});

var startChatMe = function(socket) {

    // init connection //

    //send history to user

    // =============== //

    //     events      //

    socket.on('disconnect', function() {

        if (socket.user) {
            if (socket.user.lastroom) {
                leaveroom(socket, socket.user.lastroom);
            }
            connectedSockets[socket.user.id].splice(connectedSockets[socket.user.id].indexOf(socket.id), 1);
            if (!connectedSockets[socket.user.id].length) {
                delete connectedSockets[socket.user.id];
                console.log('user disconnected. Online users: ' + Object.keys(connectedSockets).length);
            }

        }

    });

    socket.on('define user', function(token) {
        if (!token) {
            console.log("ERROR! No token sent");
            Jsonerror(socket);
            return;
        }
        db.findUserByToken(token, function(err, user) {
            if (err) {
                console.log(err);
                return Jsonerror(socket);
            }
            if (!user) {
                console.log('no user found for given token.');
                return Jsonerror(socket, 'invalidtoken', 'invalid token!');
            }

            socket.user = { //set user metadata
                id: user._id,
                name: user.name,
                email: user.email,
                color: color[user.color],
                status: status[user.status],
                created: user.created,
                istyping: false,
                isrecording: false,
                activerooms: user.activerooms,
                joinedroom: user.joinedroom,
                pmRecipient: undefined
            };

            user = undefined;

            if (!connectedSockets[socket.user.id]) {
                connectedSockets[socket.user.id] = [];
                console.log('a user connected. Online users: ' + Object.keys(connectedSockets).length);
            }
            connectedSockets[socket.user.id].push(socket.id);


            socket.emit('init', {
                name: socket.user.name,
                activerooms: socket.user.activerooms,
                joinedroom: socket.user.joinedroom
            });

            socket.on('send message', function(msg) {
                if (typeof msg != "string") {
                    console.log("ERROR! Wrong msg datatype");
                    return Jsonerror(socket);
                }
                var roomname = getsocketroom(socket);

                if (!roomexists(roomname)) {
                    console.log('room %s does not exist!', roomname);
                    Jsonerror(socket, 'stderror', 'room does not exist!');
                    return;
                }

                msg = elabMessage(msg);
                var msgobj = {
                    _id: db.getNewId(),
                    type: 'user_msg',
                    text: msg,
                    time: new Date(),
                    ownername: socket.user.name,
                    ownercolor: socket.user.color
                };
                if (roomname.startsWith('pm://')) {
                    sendPmMessage(roomname, msgobj);
                } else {
                    sendMessage(roomname, msgobj);
                    sliceMsgs(roomname);
                }
            });

            socket.on('set background', function(background, callback) {
                if (!(background instanceof Buffer)) {
                    console.log("ERROR! background is not an ArrayBuffer.");
                    return Jsonerror(socket);
                }

                sharp(background)
                    .resize(300)
                    .jpeg()
                    .toBuffer()
                    .then(sharpbg => {
                        updateUserData({background: sharpbg}, {}, function() {
                            callback(sharpbg);
                        });
                    });

            });

            socket.on('get background', function(callback) {
                db.getUserBackground(socket.user.id, function(err, background) {
                    if (err || !user){
                        console.log(err || "ERROR! No background (or user) found for user with id = " + socket.user.id);
                        return;
                    }

                    callback(background);
                });
            });

            socket.on('send media', function(mediaobject) {
                if (typeof mediaobject != "object") {
                    console.log("ERROR! Wrong media datatype: " + typeof audio);
                    return Jsonerror(socket);
                }

                var typeobj = {};

                if (mediaobject.type == 'audio') {
                    if (!(mediaobject.buffer instanceof Buffer)) {
                        console.log("ERROR! Audio buffer is not a Blob.");
                        return Jsonerror(socket);
                    }

                    typeobj.duration = mediaobject.duration;
                } else if (mediaobject.type == 'image') {
                    if (!(mediaobject.buffer instanceof Buffer)) {
                        console.log("ERROR! Image buffer is not an ArrayBuffer.");
                        return Jsonerror(socket);
                    }

                    typeobj.text = mediaobject.text;
                } else {
                    console.log("ERROR! Wrong media type: " + mediaobject.type);
                    return Jsonerror(socket);
                }

                var roomname = getsocketroom(socket);
                if (!roomname) return Jsonerror(socket);

                var messageid = db.getNewId();

                function bufferDone() {
                    db.createMedia(roomname, {
                        buffer: mediaobject.buffer,
                        preview: mediaobject.preview,
                        type: mediaobject.type,
                        messageid: messageid
                    }, function(err, media) {
                        if (err) {
                            console.log(err);
                            return Jsonerror(socket);
                        }

                        var msgobj = {
                            _id: messageid,
                            type: mediaobject.type,
                            time: new Date(),
                            ownername: socket.user.name,
                            ownercolor: socket.user.color
                        };

                        msgobj = Object.assign({}, msgobj, typeobj);

                        if (roomname.startsWith('pm://')) {
                            sendPmMessage(roomname, msgobj);
                        } else {
                            sendMessage(roomname, msgobj);
                            sliceMsgs(roomname);
                        }
                    });
                }

                if (mediaobject.type == 'audio') {
                    bufferDone();
                } else if (mediaobject.type == 'image') {
                    sharp(mediaobject.buffer) //TODO FIX THIS IN ONE ROW
                    .resize(500)
                    .jpeg()
                    .toBuffer()
                    .then(sharpbuffer => {
                        mediaobject.buffer = sharpbuffer;

                        sharp(mediaobject.buffer)
                        .resize(120,120)
                        .jpeg({quality: 1})
                        .toBuffer()
                        .then(previewBuffer => {
                            mediaobject.preview = toBase64(previewBuffer);
                            bufferDone();
                        })
                        .catch(err => {
                            console.log(err);
                            Jsonerror(socket);
                        })


                    })
                    .catch(err => {
                        console.log(err);
                        Jsonerror(socket);
                    })
                }

            });

            socket.on('get mediapre', function(messageid, callback) {
                var roomname = getsocketroom(socket);
                if (!roomname) return Jsonerror(socket);

                db.getMediaPreview({
                    roomname: roomname,
                    messageid: messageid
                }, function(err, media) {
                    if (err) {
                        console.log(err);
                        Jsonerror(socket);
                        return;
                    }
                    if (!media) {
                        console.log('ERROR! No media found for id ' + messageid);
                        Jsonerror(socket, 'nomediafound', 'error loading the media', {
                            id: messageid
                        });
                        return;
                    }
                    if (typeof callback == 'function')
                        callback({
                            id: messageid,
                            preview: media.preview
                        });
                });
            });

            socket.on('get media', function(messageid, callback) {
                var roomname = getsocketroom(socket);
                if (!roomname) return Jsonerror(socket);

                db.findMedia({
                    roomname: roomname,
                    messageid: messageid
                }, function(err, media) {
                    if (err) {
                        console.log(err);
                        Jsonerror(socket);
                        return;
                    }
                    if (!media) {
                        console.log('ERROR! No media found for id ' + messageid);
                        Jsonerror(socket, 'nomediafound', 'error loading the media', {
                            id: messageid
                        });
                        return;
                    }
                    if (typeof callback == 'function')
                        callback({
                            id: messageid,
                            buffer: media.buffer,
                        });
                });

            });

            socket.on('change_status', function(value) {
                var newstatus = status[value];
                if (!newstatus) return Jsonerror(socket, 'stderror', 'Error: unknown status: ' + value);

                updateUserData({
                    status: value
                }, {
                    status: newstatus
                }, function() {
                    var roomname = getsocketroom(socket);
                    io.sockets.in(roomname).emit('refresh_user', {
                        name: socket.user.name,
                        status: newstatus
                    });
                });

            });

            socket.on('change_userset', function(settings) {
                try {
                    var newcolor = color[settings.color];
                    if (!newcolor) {
                        console.log('unknown color!');
                        return Jsonerror(socket);
                    }

                    socket.user.color = newcolor;

                    updateUserData({
                        color: settings.color
                    }, {
                        color: newcolor
                    }, function() {

                        var roomname = getsocketroom(socket);
                        if (roomname) {

                            rooms[roomname].users[socket.user.name].color = newcolor;
                            io.sockets.in(roomname).emit('user_color', {
                                name: socket.user.name,
                                color: newcolor
                            });

                        } else {

                            socket.emit('user_color', {
                                name: socket.user.name,
                                color: newcolor
                            });

                        }

                        socket.emit('settings_saved');

                    });

                } catch (e) {
                    console.log(e);
                    return Jsonerror(socket);
                }
            });

            socket.on('typingstatus', function(value) {
                var roomname = getsocketroom(socket);
                if (!roomname) return;
                socket.user.istyping = !!value;
                try {
                    rooms[roomname].users[socket.user.name].istyping = socket.user.istyping;
                } catch (e) {
                    console.log('error for user ' + socket.user.name);
                    console.log(e);
                }
                io.sockets.in(roomname).emit('user_typing', {
                    name: socket.user.name,
                    istyping: socket.user.istyping
                });
            });

            socket.on('recording', function(value) {
                var roomname = getsocketroom(socket);
                if (!roomname) return;
                socket.user.isrecording = !!value;
                try {
                    rooms[roomname].users[socket.user.name].isrecording = socket.user.isrecording;
                } catch (e) {
                    console.log('error for user ' + socket.user.name);
                    console.log(e);
                }
                io.sockets.in(roomname).emit('user_recording', {
                    name: socket.user.name,
                    isrecording: socket.user.isrecording
                });
            });

            socket.on('search rooms', function(roomquery) {
                if (roomquery.length < 3) {
                    console.log('ERROR! roomquery query too short');
                    Jsonwarn(socket, 'invalidroomname');
                    return;
                }

                var result = {
                    query: roomquery,
                    rooms: []
                };

                customrooms.forEach(function(thisroom) { //change with db call
                    if (thisroom.match(roomquery) && thisroom != 'global') {
                        var haspass = !!rooms[thisroom].password;
                        var users = Object.keys(rooms[thisroom].users).length;
                        result.rooms.push({
                            name: thisroom,
                            haspass: haspass,
                            users: users
                        });
                    }
                });

                socket.emit('rooms result', result);

            });

            socket.on('search users', function(userquery, callback) {
                if (typeof userquery != 'string') return console.log('invalid userquery datatype');

                if (userquery.length < 3) {
                    console.log('ERROR! userquery query too short');
                    Jsonwarn(socket, 'stdwarn', 'user query too short');
                    return;
                }

                var result = {
                    query: userquery,
                    rooms: []
                };

                db.queryUserNamesMatches(userquery, function(err, userslist) {
                    if (err) {
                        console.log(err);
                        return Jsonerror(err);
                    }

                    var myindex = userslist.indexOf(socket.user.name);
                    if (myindex != -1) userslist.splice(myindex, 1);

                    if (typeof callback == 'function') callback(null, userslist);
                });


            });

            socket.on('get pmlist', function(data, callback) {
                db.getPmList(socket.user.id, function(err, pmlist) {
                    if (err) {
                        console.log(err);
                        return Jsonerror(socket);
                    }
                    if (!pmlist) {
                        console.log("Error! No user found for id " + socket.user.id);
                        return Jsonerror(socket);
                    }
                    if (typeof callback == 'function') callback(null, pmlist);
                });
            });

            socket.on('switch room', function(room) {

                if (typeof room.name !== 'string') {
                    Jsonerror(socket);
                    return;
                }

                if (!room.pass) room.pass = '';

                room.name = room.name ? room.name.replace(/ /g, '') : '';
                switch (room.type) {

                    case 'global':
                    switchroom(socket, 'global');
                    break;

                    case 'site':
                    switchsiteroom(socket, room.name);
                    break;

                    case 'custom': //custom room
                    switchroom(socket, room.name, room.pass);
                    break;

                    case 'pm': //private message
                    switchpmroom(room.name, false);
                    break;

                    default:
                    console.log("ERROR! Unknown room type: " + room.type);
                    Jsonerror(socket);
                    return;
                }

            });

            socket.on('switch pmroom', function(username) {
                switchpmroom(username, true);
            });

            socket.on('join room', function(room) {
                if (!room.name) {
                    console.log('ERROR! No room.name!');
                    Jsonerror(socket);
                    return;
                }
                switchroom(socket, room.name, room.pass, function() {
                    var tabroom = {
                        name: room.name,
                        pass: room.pass,
                        html: room.name
                    };
                    socket.emit('set room', tabroom);
                    socket.user.activerooms[room.name] = tabroom;

                    updateUserDbActiveRooms();
                });
            });


            socket.on('create room', function(room) {
                if (typeof room.name != 'string') {
                    console.log("ERROR! wrong room  datatype");
                    Jsonerror(socket);
                    return;
                }
                var roomname = room.name.replace(/ /g, '');
                var roompass = room.pass;

                if (!roomname.length) {
                    console.log("ERROR! empty roomname");
                    Jsonwarn(socket, 'invalidroomname', 'Room name can\'t be empty.');
                    return;
                }
                if (roomname.length < 3) {
                    console.log(roomname + ": ERROR! Name too short");
                    Jsonwarn(socket, 'invalidroomname', 'name is too short!');
                    return;
                }
                if (roomname.startsWith('pm://') || roomname.startsWith('pm:') || roomname.startsWith('site://') || roomname.startsWith('http://') || roomname.startsWith('https://') || roomname.startsWith('www.') || roomname.toLowerCase() == 'global' || roomname.toLowerCase() == 'site') {
                    console.log(roomname + ": ERROR! Invalid name");
                    Jsonwarn(socket, 'invalidroomname', 'invalid name!');
                    return;
                }
                if (roomexists(roomname)) {
                    console.log(roomname + ' ERROR! Room already exists');
                    Jsonwarn(socket, 'invalidroomname', 'the room already exists');
                    return;
                } // else

                createroom(socket, roomname, roompass);
            });

            socket.on('leave room', function(roomname) {
                leaveroom(roomname);
            });

            socket.on('remove active room', function(roomname) {
                if (typeof roomname != 'string')
                    return console.log('ERROR! remove active room: type of roomname != string. Got ' + typeof roomname);

                delete socket.user.activerooms[roomname];
                updateUserDbActiveRooms();

                //TODO !IMPORTANT! REMOVE ROOM AND ITS MESSAGES WHEN NOONE'S ACTIVE ANYMORE
            });

            // ================ //  
        });

});

function sendMessage(room, msgobj) {
    io.sockets.in(room).emit('new message', msgobj);
    rooms[room].history.push(msgobj);
    db.createMessage(socket.user.id.toString(), room, msgobj, function(err, result) {
        if (err) console.log(err);
        else if (!result.nModified) console.log('ERROR! no room found in db with name ' + room);
    });
}

function sendPmMessage(room, msgobj) {


    socket.emit('new message', msgobj);

    var recipientid = getRecipientId(socket.user.id.toString(), room);
    if (!recipientid) return console.log("ERROR! Userid is not in roomname! room: " + room + " | userid: " + socket.user.id);
    rooms[room].history.push(msgobj);
    rooms[room].unseen[recipientid]++;
    rooms[room].lastmsg = msgobj;

    var clearunseen = false;
    var pmMsgobj = Object.assign({}, msgobj, {
        recipientnamefor: socket.user.name
    });
    socket.emit('pm-addseen', Object.assign({}, msgobj, {
        recipientnamefor: socket.user.pmRecipient
    }));

    var recipientSocketsIds = connectedSockets[recipientid];

        if (recipientSocketsIds) { //recipient is connected
            recipientSocketsIds.forEach(recipSockId => {
                var recipientSocket = io.sockets.connected[recipSockId];

                var recipientroomname = getsocketroom(recipientSocket);
                if (recipientroomname == room) { // recipient user is in pm room
                    recipientSocket.emit('new message', msgobj);
                    clearunseen = true;
                    recipientSocket.emit('pm-addseen', pmMsgobj);
                } else {
                    recipientSocket.emit('pm-addunseen', pmMsgobj);
                }
            });
        }

        db.createPmMessageAndUpdate(socket.user.id.toString(), recipientid, room, msgobj, function(err, users) {
            if (err) return console.log(err);
            if (!users.length) return console.log("ERROR! No user found for id " + socket.user.id + " or id " + recipientid);

            if (clearunseen) {
                db.clearPmUnseenForId(room, recipientid, err => {
                    if (err) {
                        console.log(err);
                        Jsonwarn(socket);
                    }
                });
            }
        });


    }

    function getRecipientId(userid, roomname) {
        var ids = roomname.replace('pm://', '').split('-');
        if (ids.indexOf(userid) == -1) return;
        ids.splice(ids.indexOf(userid), 1);
        var recipientid = ids[0];

        return recipientid;
    }

    function switchsiteroom(socket, roomname) {
        if (!roomexists(roomname)) {
            initsiteroom(roomname, function() {
                joinroom(socket, roomname, function() {
                    console.log('joined site room ' + roomname);
                });
            });
        } else {
            joinroom(socket, roomname, function() {
                console.log('joined site room ' + roomname);
            });
        }
    }

    function switchpmroom(username, setclient) {

        db.findUserByName(username, function(err, user) {
            if (err) {
                console.log("ERROR!");
                console.log(err);
                return Jsonerror(socket);
            }
            if (!user) {
                console.log("ERROR! No user found for name: " + username);
                return Jsonerror(socket, 'roomdoesnotexist', 'no user found for given name!', {
                    name: username,
                    type: 'pm'
                });
            }

            var socketid = socket.user.id;
            var userid = user.id;

            if (socketid == userid) {
                console.log("ERROR! socketid and recipientid match!");
                return Jsonerror(socket);
            }

            var roomname = 'pm://' + (socketid < userid ? socketid + '-' + userid : userid + '-' + socketid);
            var joinroomdata = {
                pmRecipient: username
            };
            var afterjoin = function(clientroom) {
                console.log('joined pm room ' + roomname);
                var tabroom = {
                    name: username,
                    type: 'pm',
                    html: username
                };
                if (setclient) {
                    socket.emit('set room', tabroom);
                    socket.user.activerooms[username] = tabroom;
                    updateUserDbActiveRooms();
                }
                socket.emit('pm-setseen', username);
                socket.user.pmRecipient = username;
            };

            if (!roomexists(roomname)) {

                var recipientnamefor = {};
                recipientnamefor[socketid] = username;
                recipientnamefor[userid] = socket.user.name;

                createGetDbPmRoom(socket, {
                    name: roomname,
                    ids: [socketid, userid],
                    recipientnamefor: recipientnamefor
                }, function(dbroom) {

                    rooms[roomname] = dbroom
                    joinroom(socket, roomname, afterjoin, joinroomdata);
                    db.clearPmUnseenForId(roomname, socketid, err => {
                        if (err) {
                            console.log(err);
                            Jsonwarn(socket);
                        }
                    });

                });
            } else {
                joinroom(socket, roomname, afterjoin, joinroomdata);
                db.clearPmUnseenForId(roomname, socketid, err => {
                    if (err) {
                        console.log(err);
                        Jsonwarn(socket);
                    }
                });
            }

        });

    }

    function switchroom(socket, roomname, sentpass, callback) {

        if (!roomexists(roomname)) {

            console.log('error! room  %s does not exist', roomname);
            Jsonerror(socket, 'roomdoesnotexist', 'room does not exist!', {
                name: roomname,
                type: 'custom'
            });
            return;

        } else {

            var roompass = getroom(roomname).password;
            if (roompass && sentpass != roompass) {
                Jsonerror(socket, 'wrongpassword', 'Wrong password!', {
                    name: roomname,
                    type: 'custom'
                });
                return;
            }

        }
        joinroom(socket, roomname, function() {
            console.log('joined room ' + roomname);
            if (callback) callback();
        });

    }

    function createroom(socket, roomname, roompass) {
        initroom(roomname, roompass, function() {
            console.log('new room created: ' + roomname + ' password: ' + !!roompass);
            switchroom(socket, roomname, roompass, function() {
                var tabroom = {
                    name: roomname,
                    pass: roompass,
                    html: roomname
                };
                socket.emit('set room', tabroom);
                socket.user.activerooms[roomname] = tabroom;

                updateUserDbActiveRooms();
            });
        });
    }

    function joinroom(socket, roomname, callback, data) {
        function nowjoin() {

            socket.join(roomname, function() {
                var userdata = {
                    name: socket.user.name,
                    status: socket.user.status,
                    istyping: socket.user.istyping,
                    color: socket.user.color
                };
                io.sockets.in(roomname).emit('add_user', userdata);

                rooms[roomname].users[socket.user.name] = userdata;
                rooms[roomname].userslist.push(socket.user.name);
                var clientroom = roomname.startsWith('site://') ? 'site' : (roomname.startsWith('pm://') ? 'pm:'+data.pmRecipient : roomname);
                socket.emit('history_users', {
                    history: rooms[roomname].history,
                    users: rooms[roomname].users,
                    roomname: clientroom
                });

                socket.user.lastroom = roomname;
                socket.user.joinedroom = clientroom;

                updateUserData({joinedroom: clientroom}, {});
                socket.user.pmRecipient = undefined;

                if (callback) callback(clientroom);
            });

        }

        var currentroom = getsocketroom(socket);
        if (currentroom) leaveroom(socket, currentroom, nowjoin);
        else nowjoin();

    }

    function leaveroom(socket, roomname, callback) {
        socket.leave(roomname, function() {
            var socketindex = rooms[roomname].userslist.indexOf(socket.user.name);
            if (socketindex + 1)
                rooms[roomname].userslist.splice(socketindex, 1);
            var stillConnected = rooms[roomname].userslist.indexOf(socket.user.name) + 1;
            if (!stillConnected) {
                io.sockets.in(roomname).emit('remove_user', socket.user.name);
                delete rooms[roomname].users[socket.user.name];
            }
            console.log('left room ' + roomname);
            if (callback) callback();

            // delete user joined rooms in db

            // delete room if no users are in the room
            // delete customrooms[romname];
            //
            /*var index = customrooms.indexOf(5);
            if (index + 1) customrooms.splice(index, 1);*/
        });
    }

    function getroom(roomname) {
        return rooms[roomname];
    }

    function getrooms(callback) {
        callback(rooms);
    }

    function initroom(roomname, roompass, callback) {
        createDbRoom(socket, {
            name: roomname,
            password: roompass,
            iscustom: true
        }, function() {

            rooms[roomname] = {
                history: [],
                password: roompass,
                users: {},
                userslist: [],
                iscustom: true
            };

            customrooms.push(roomname);
            if (callback) callback();
        });
    }

    function initsiteroom(roomname, callback) {
        createDbRoom(socket, {
            name: roomname,
            iscustom: false
        }, function() {

            rooms[roomname] = {
                history: [],
                users: {},
                userslist: [],
                iscustom: false
            };

            if (callback) callback();
        });
    }

    function getsocketroom(socket) {
        return Object.keys(socket.rooms)[1];
    }

    function roomexists(roomname) {
        return !!rooms[roomname];
    }

    function sliceMsgs(roomname) {
        if (rooms[roomname].history.length > 100) {
            var lastmsg = rooms[roomname].history.shift();
            var msgid = lastmsg.id;

            db.deleteMessageById(msgid, function(err) {
                if (err) {
                    console.log('ERROR! Failed to delete message with id: ' + msgid)
                    console.log(err);
                }
            });

            if (lastmsg.type == 'audio' || lastmsg.type == 'image') {

                db.deleteMedia({
                    roomname: roomname,
                    messageid: msgid
                }, function(err, media) {
                    if (err) {
                        console.log('failed to delete media with id :' + msgid);
                        console.log(err);
                        return;
                    }
                });

            }
        }
    }

    function updateUserData(data, socketdata, callback) {
        db.updateUserData(socket.user.id, data, function(err) {
            if (err) {
                console.log(err);
                return Jsonerror(socket);
            }
            Object.assign(socket.user, socketdata);
            if (callback) callback();
        });
    }

    function updateUserDbActiveRooms() {
        db.updateUserData(socket.user.id, {activerooms: socket.user.activerooms}, function(err) {
            if (err) console.log("ERROR! Failed to update activerooms for user " + socket.user.name);
        });
    }

    function createDbRoom(socket, roomdata, callback) {
        db.createRoom(roomdata, function(err, room) {

            if (err) {
                console.log(err);
                return Jsonerror(socket);
            }
            if (!room) {
                console.log('ERROR! Room already exists');
                return Jsonerror(socket, 'roomexists', 'Room already exists!');
            }
            console.log('created room ' + roomdata.name);
            if (callback) callback();

        });
    }

    function createGetDbPmRoom(socket, roomdata, callback) {
        db.createGetPmRoom(roomdata, function(err, room) {
            if (err) {
                console.log(err);
                return Jsonerror(socket);
            }
            if (!room) {
                // If a pm room already exists, continue without throwing errors.
                callback();
                return;
            }
            console.log('created pm room ' + roomdata.name);
            callback(room);
        });
    }

    function toBase64(data) {
      return 'data:image/jpeg;base64,' + data.toString('base64');
  };

  function Jsonerror(socket, type = 'stderror', message = 'Internal error. Try again later.', data = {}) {
    socket.emit('jsonerror', {
        type: type,
        message: message,
        data: data
    });
}

function Jsonwarn(socket, type = 'stdwarn', message = 'Internal error. Try again later.') {
    socket.emit('jsonwarning', {
        type: type,
        message: message
    });
}


};
