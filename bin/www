#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('chatme:server');
 var fs = require('fs');
 var http = require('http');
 var https = require('https');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '60000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};

var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind + ' mode: ' + process.env.NODE_ENV);
}

var users = [];
var connections = [];
var history = {};
var io = require('socket.io').listen(server);
var r_global = 'global';

var rooms = {};
var customrooms = [];
// init rooms //
rooms.global = {
  history: []
}

io.sockets.on('connection', function(socket) {

  // init connection //

  switchroom(socket, r_global);
  
  //connections.push(socket);

  console.log('a user connected');
  //send history to user

  // =============== //

  //     events      //

  socket.on('disconnect', function() {
    connections.splice(connections.indexOf(socket), 1);
    console.log('user disconnected');
  });

  socket.on('define user', function(token) {
    if (!token) {
      Jsonerror(socket);
      return;
    }
    socket.name = token; // change with db call for username
    socket.token = token;

    socket.on('send message', function(msg) {
      var room = getsocketroom(socket);
      if (!roomexists(room)) {
        Jsonerror(socket, 'stderror', 'room does not exist!');
        return;
      }
      console.log('sending message on room ' + JSON.stringify(room));
      var msgobj = {type: 'message', text: msg, time: new Date(), author: socket.name};
      io.sockets.in(room).emit('new message', {msg: msgobj});
      rooms[room].history.push(msgobj);

      rooms[room].history = rooms[room].history.slice(-100);
    });

    socket.on('search rooms', function(roomquery) {
      if (roomquery.length < 3) {
        console.log('roomquery query too short');
        Jsonwarn(socket, 'invalidroomname');
        return;
      }

      var result = {query: roomquery, rooms: []};

      customrooms.forEach(function(thisroom) {
        if (thisroom.match(roomquery) && thisroom != 'global') {
          var haspass = !!rooms[thisroom].password;
          var users = 3;
          result.rooms.push({name: thisroom, haspass: haspass, users: users});
        }
      });

      socket.emit('rooms result', result);

    });

    socket.on('switch room', function(room) {

      if (typeof room.name !== 'string') {
        Jsonerror(socket);
        return;
      }

      if (!room.pass) room.pass = '';

      room.name = room.name ? room.name.replace(/ /g, '') : '';
      switch(room.type) {

        case 'global':
          switchroom(socket, 'global');
          break;

        case 'site':
          switchsiteroom(socket, room.name);
          break;

        case 'custom': //custom room
          switchroom(socket, room.name, room.pass);
          break;

        default:
          Jsonerror(socket);
          return;
      }

    });

    socket.on('join room', function(room) {
      if(!room.name) {
        Jsonerror(socket);
        return;
      }
      switchroom(socket, room.name, room.pass, false, function() {
        socket.emit('set room', {name: room.name, pass: room.pass});
      });
    });


    socket.on('create room', function(room) {
      if (!room.name) {
        Jsonerror(socket);
        return;
      }
      var roomname = room.name.replace(/ /g, '');
      var roompass = room.pass;

      if (roomname.length < 3) {
        console.log(roomname + ": name too short");
        Jsonwarn(socket, 'invalidroomname', 'name is too short!');
        return;
      }
      if (roomname.startsWith('site://') || roomname.startsWith('http://') || roomname.startsWith('https://') || roomname.startsWith('www.')) {
        console.log(roomname + ": invalid name");
        Jsonwarn(socket, 'invalidroomname', 'invalid name!');
        return;
      }
      if (roomexists(roomname)) {
        console.log(roomname + ' room already exists');
        Jsonwarn(socket, 'invalidroomname', 'the room already exists');
        return;
      } // else

      createroom(socket, roomname, roompass);
    });

    socket.on('leave room', function(roomname) {
      leaveroom(roomname);
    });

    // ================ //

  });

  function switchsiteroom(socket, roomname) {
    if (!roomexists(roomname)) setsiteroom(roomname);
    socket.join(roomname);
    console.log('joined site room ' + roomname);
    socket.emit('history', rooms[roomname].history);
  }

  function switchroom(socket, roomname, sentpass, forcecreate, callback) {
    var currentroom = getsocketroom(socket);
    if (currentroom) socket.leave(currentroom);

    if (!roomexists(roomname)) {

      if (!forcecreate) {
        console.log('error! room  %s does not exist', roomname);
        Jsonerror(socket, 'stderror', 'room does not exist!');
        return;
      } else {
        setroom(roomname, sentpass);
      }

    } else {

      var roompass = getroom(roomname).password;
      if (roompass && sentpass != roompass) {
        Jsonerror(socket, 'wrongpassword', 'Wrong password!', {name : roomname});
        return;
      }

    }

    if (callback) socket.join(roomname, callback);
    else socket.join(roomname);

    console.log('joined room ' + roomname);

    socket.emit('history', rooms[roomname].history);
  }

  function createroom(socket, roomname, roompass) {
    setroom(roomname, roompass);
    switchroom(socket, roomname, roompass, false, function() {
      console.log('new room created: ' + roomname + ' password: ' + !!roompass);
      socket.emit('set room', {name: roomname, pass: roompass});
    });
  }

  function leaveroom(socket, roomname) {
    socket.leave(roomname, function() {
      console.log('left room.' + roomname);
      // delete user joined rooms in db

      // delete room if no users are in the room
      // delete customrooms[romname];
      //
      /*var index = customrooms.indexOf(5);
      if (index + 1) customrooms.splice(index, 1);*/
    });
  }

  function getroom(roomname) {
    return rooms[roomname];
  }

  function getrooms(callback) {
    callback(rooms);
  }
  function setroom(roomname, roompass, callback) {
    rooms[roomname] = { history: [], password: roompass };
    customrooms.push(roomname);
    if (callback) callback();
  }
  function setsiteroom(roomname) {
    rooms[roomname] = { history: [] };
  }
  function getsocketroom(socket) {
    return Object.keys(socket.rooms)[1];
  }

  function roomexists(roomname) {
    return !!rooms[roomname];
  }

  function Jsonerror(socket, type='stderror', message='Internal error. Retry later.', data = {}) {
    socket.emit('jsonerror', {type: type, message: message, data: data});
  }

  function Jsonwarn(socket, type='stdwarn', message='Internal error. Retry later.') {
    socket.emit('jsonwarning', {type: type, message: message});
  }


});