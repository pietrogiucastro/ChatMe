#!/usr/bin/env node

 var app = require('../app');
 var debug = require('debug')('chatme:server');
 var fs = require('fs');
 var path = require('path');
 var http = require('http');
 var https = require('https');
 var anchorme = require('anchorme').default;
 var guid = require('uuid').v4;
 var CryptoJS = require("crypto-js");

/* 
// Encrypt 
var ciphertext = CryptoJS.AES.encrypt('my message', 'secret key 123');
 
// Decrypt 
var bytes  = CryptoJS.AES.decrypt(ciphertext.toString(), 'secret key 123');
var plaintext = bytes.toString(CryptoJS.enc.Utf8);*/


var db = require('../db/mongoose.js');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '60000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};

var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind + ' mode: ' + process.env.NODE_ENV);
}

var connections = [];
var history = {};
var io = require('socket.io').listen(server);
var ss = require('socket.io-stream');
var r_global = 'global';

var rooms = { global: { history : [], users: {}, userslist: [], audios: {} } };

var customrooms = [];

var status = {
  online : {message: 'Online', classname: 'isonline'},
  offline : {message: 'Offline', classname: 'isoffline'},
  busy : {message: 'Busy', classname: 'isbusy'},
  afk : {message: 'AFK', classname: 'isafk'},
  toilet : {message: 'Toilet!', classname: 'istoilet'},
};

var color = {
  default: 'green',
  red: 'red',
  green: 'green',
  blue: 'blue',
  black: 'black',
  yellow: 'yellow',
  orange: 'orange',
  skyblue: 'skyblue'
};

function elabMessage(msg) {
  msg = msg.replace(/</g, '&lt').replace(/>/g, '&gt').trim();
  msg = anchorme(msg, {
    attributes:[{
      name:"target",
      value:"_blank"
    }]
  });
  return msg;
}

db.reset();

io.sockets.on('connection', function(socket) {

  // init connection //
  
  connections.push(socket);

  console.log('a user connected. Online users: ' + connections.length);
  //send history to user

  // =============== //

  //     events      //

  socket.on('disconnect', function() {
    connections.splice(connections.indexOf(socket), 1);

    if (socket.user && socket.user.lastroom) {
      leaveroom(socket, socket.user.lastroom);
    }

    console.log('user disconnected. Online users: ' + connections.length);
  });

  socket.on('define user', function(token) {
    if (!token) {
      Jsonerror(socket);
      return;
    }
    db.findUserByToken(token, function(err, user) {
      if (err) {
        console.log(err);
        return Jsonerror(socket);
      }
      if (!user) {
        console.log('no user found for given token.');
        return Jsonerror(socket, 'invalidtoken', 'invalid token!');
      }

      socket.user = { //set user metadata
        id: user._id,
        name: user.name,
        email: user.email,
        color: color[user.color],
        status: status[user.status],
        created: user.created,
        istyping: false,
        isrecording: false,
        lastroom: undefined
      }

      user = undefined;

      socket.emit('initchat');

      socket.on('send message', function(msg) {
        if (typeof msg != "string") {
          return Jsonerror(socket);
        }
        var roomname = getsocketroom(socket);
        if (!roomexists(roomname)) {
          console.log('room %s does not exist!', roomname);
          Jsonerror(socket, 'stderror', 'room does not exist!');
          return;
        }
        msg = elabMessage(msg);
        var msgobj = {type: 'user_msg', text: msg, time: new Date().getTime(), author: socket.user.name, ownercolor: socket.user.color};
        sendMessage(roomname, msgobj);
        sliceMsgs(roomname);
      });

      socket.on('send audio', function(audio) {
          if (typeof audio != "object") {
            return Jsonerror(socket);
          }
          var roomname = getsocketroom(socket);
          if (!roomname) return Jsonerror(socket);

          db.createMedia({buffer: audio.buffer, type:'audio'}, function(err, result) {
            if (err) {
              console.log(err);
              Jsonerror(socket);
              return;
            }
            var media = result.ops[0];

            var audioid = media._id;
            var msgobj = {type: 'user_audio', id: audioid, duration: audio.duration, time: new Date().getTime(), author: socket.user.name, ownercolor: socket.user.color};
            sendMessage(roomname, msgobj);
            sliceMsgs(roomname);
          });

      });

      socket.on('get audio', function(audioid) {
          var roomname = getsocketroom(socket);
          if (!roomname) return Jsonerror(socket);

          db.findMediaById(audioid, function(err, media) {
            if (err) {
              console.log(err);
              Jsonerror(socket);
              return;
            }
            if (!media) {
              console.log('ERROR! No media found!');
              Jsonerror(socket, 'nomediafound', 'error loading the media', {id: audioid});
              return;
            }
            socket.emit('response audio', {id: audioid, buffer: media.buffer});
          });

      });

      ss(socket).on('file', function(stream) {
        console.log(stream);
        return;
        var uploadpath = process.cwd()+'/uploads/ciao.jpg';
        
        // try {
          stream.pipe(fs.createWriteStream(uploadpath));
        /*} catch(e) {
          console.log(e);
          return Jsonerror(socket);
        }*/
      });

      socket.on('change_status', function(value) {
        var newstatus = status[value];
        if (!newstatus) return Jsonerror(socket, 'stderror', 'Error: unknown status: ' + value);

        updateUserData({
          status: value
        }, {
          status: newstatus
        }, function() {
          var roomname = getsocketroom(socket);
          io.sockets.in(roomname).emit('refresh_user', {name: socket.user.name, status: newstatus});
        });

      });

      socket.on('change_userset', function(settings) {
        try {
          var newcolor = color[settings.color];
          if (!newcolor) {
            console.log('unknown color!');
            return Jsonerror(socket);
          }

          socket.user.color = newcolor;

          updateUserData({color: settings.color}, {color: newcolor}, function() {

            var roomname = getsocketroom(socket);
            if (roomname) {

              rooms[roomname].users[socket.user.name].color = newcolor;
              io.sockets.in(roomname).emit('user_color', {name: socket.user.name, color: newcolor});

            } else {

              socket.emit('user_color', {name: socket.user.name, color: newcolor});

            }

            socket.emit('settings_saved');

          });

        }

        catch(e) {
          console.log(e);
          return Jsonerror(socket);
        }
      });

      socket.on('typingstatus', function(value) {
        var roomname = getsocketroom(socket);
        if (!roomname) return;
        socket.user.istyping = !!value;
        try {rooms[roomname].users[socket.user.name].istyping = socket.user.istyping;}
        catch(e) { console.log('error for user ' + socket.user.name); console.log(e); }
        io.sockets.in(roomname).emit('user_typing', {name: socket.user.name, istyping: socket.user.istyping});
      });

      socket.on('recording', function(value) {
        var roomname = getsocketroom(socket);
        if (!roomname) return;
        socket.user.isrecording = !!value;
        try {rooms[roomname].users[socket.user.name].isrecording = socket.user.isrecording;}
        catch(e) { console.log('error for user ' + socket.user.name); console.log(e); }
        io.sockets.in(roomname).emit('user_recording', {name: socket.user.name, isrecording: socket.user.isrecording});
      });

      socket.on('search rooms', function(roomquery) {
        if (roomquery.length < 3) {
          console.log('roomquery query too short');
          Jsonwarn(socket, 'invalidroomname');
          return;
        }

        var result = {query: roomquery, rooms: []};

        customrooms.forEach(function(thisroom) {
          if (thisroom.match(roomquery) && thisroom != 'global') {
            var haspass = !!rooms[thisroom].password;
            var users = 3;
            result.rooms.push({name: thisroom, haspass: haspass, users: users});
          }
        });

        socket.emit('rooms result', result);

      });

      socket.on('switch room', function(room) {

        if (typeof room.name !== 'string') {
          Jsonerror(socket);
          return;
        }

        if (!room.pass) room.pass = '';

        room.name = room.name ? room.name.replace(/ /g, '') : '';
        switch(room.type) {

          case 'global':
            switchroom(socket, 'global');
            break;

          case 'site':
            switchsiteroom(socket, room.name);
            break;

          case 'custom': //custom room
            switchroom(socket, room.name, room.pass);
            break;

          default:
            Jsonerror(socket);
            return;
          }

      });

      socket.on('join room', function(room) {
        if(!room.name) {
          Jsonerror(socket);
          return;
        }
        switchroom(socket, room.name, room.pass, false, function() {
          socket.emit('set room', {name: room.name, pass: room.pass});
        });
      });


      socket.on('create room', function(room) {
        if (!room.name) {
          Jsonerror(socket);
          return;
        }
        var roomname = room.name.replace(/ /g, '');
        var roompass = room.pass;

        if (roomname.length < 3) {
          console.log(roomname + ": name too short");
          Jsonwarn(socket, 'invalidroomname', 'name is too short!');
          return;
        }
        if (roomname.startsWith('site://') || roomname.startsWith('http://') || roomname.startsWith('https://') || roomname.startsWith('www.')) {
          console.log(roomname + ": invalid name");
          Jsonwarn(socket, 'invalidroomname', 'invalid name!');
          return;
        }
        if (roomexists(roomname)) {
          console.log(roomname + ' room already exists');
          Jsonwarn(socket, 'invalidroomname', 'the room already exists');
          return;
        } // else

        createroom(socket, roomname, roompass);
      });

      socket.on('leave room', function(roomname) {
        leaveroom(roomname);
      });

      // ================ //  
    });

  });

function sendMessage(room, msgobj) {
  var roomname = room.startsWith('site://') ? 'site' : room;
  io.sockets.in(room).emit('new message', {msg: msgobj, roomname: roomname});
  rooms[room].history.push(msgobj);
  db.appendMessageToRoom(room, msgobj, function(err, room) {
    if (err) console.log(err);
    else if (!room) console.log('ERROR! no room found in db with name ' + room);
  });
}

function switchsiteroom(socket, roomname) {
  if (!roomexists(roomname)) initsiteroom(roomname);
  joinroom(socket, roomname, function() {
    console.log('joined site room ' + roomname);
  });
}

function switchroom(socket, roomname, sentpass, forcecreate, callback) {

  if (!roomexists(roomname)) {

    if (!forcecreate) {
      console.log('error! room  %s does not exist', roomname);
      Jsonerror(socket, 'stderror', 'room does not exist!');
      return;
    } else {
      initroom(roomname, sentpass);
    }

  } else {

    var roompass = getroom(roomname).password;
    if (roompass && sentpass != roompass) {
      Jsonerror(socket, 'wrongpassword', 'Wrong password!', {name : roomname});
      return;
    }

  }
  joinroom(socket, roomname, function() {
    console.log('joined room ' + roomname);
    if (callback) callback();
  });

}

function createroom(socket, roomname, roompass) {
  initroom(roomname, roompass);
  createDbRoom(socket, {name: roomname, password: roompass}, function() {
    switchroom(socket, roomname, roompass, false, function() {
      console.log('new room created: ' + roomname + ' password: ' + !!roompass);
      socket.emit('set room', {name: roomname, pass: roompass});
    });
  });
}

function joinroom(socket, roomname, callback) {
  function nowjoin() {

    if (rooms[roomname].userslist.indexOf(socket.user.name) == -1) { // if user is not connected to the room yet, send connection msg

    }


    socket.join(roomname, function() {
      var userdata = { name: socket.user.name, status: socket.user.status, istyping: socket.user.istyping, color:socket.user.color };
      io.sockets.in(roomname).emit('add_user', userdata);

      rooms[roomname].users[socket.user.name] = userdata;
      rooms[roomname].userslist.push(socket.user.name);
      var room = roomname.startsWith('site://') ? 'site' : roomname;
      socket.emit('history_users', {history: rooms[roomname].history, users: rooms[roomname].users, roomname: room});
      socket.user.lastroom = roomname;

      if (callback) callback();
    });

  }

  var currentroom = getsocketroom(socket);
  if (currentroom) leaveroom(socket, currentroom, nowjoin);
  else nowjoin();

}
function leaveroom(socket, roomname, callback) {
  socket.leave(roomname, function() {
    var socketindex = rooms[roomname].userslist.indexOf(socket.user.name);
    if (socketindex + 1)
      rooms[roomname].userslist.splice(socketindex, 1);
    var stillConnected = rooms[roomname].userslist.indexOf(socket.user.name) + 1;
    if (!stillConnected) {
      io.sockets.in(roomname).emit('remove_user', socket.user.name);
      delete rooms[roomname].users[socket.user.name];
    }
    console.log('left room ' + roomname);
    if (callback) callback();

      // delete user joined rooms in db

      // delete room if no users are in the room
      // delete customrooms[romname];
      //
      /*var index = customrooms.indexOf(5);
      if (index + 1) customrooms.splice(index, 1);*/
    });
}
function getroom(roomname) {
  return rooms[roomname];
}

function getrooms(callback) {
  callback(rooms);
}

function initroom(roomname, roompass, callback) {
  rooms[roomname] = { history: [], password: roompass, users: {}, userslist: [], audios: {} };
  customrooms.push(roomname);
  if (callback) callback();
}

function initsiteroom(roomname) {
  rooms[roomname] = { history: [], users: {}, userslist: [], audios: {} };
}

function getsocketroom(socket) {
  return Object.keys(socket.rooms)[1];
}

function roomexists(roomname) {
  return !!rooms[roomname];
}

function sliceMsgs(roomname) {
  if (rooms[roomname].history.length > 100 ) {
    var lastmsg = rooms[roomname].history.shift();
    if (lastmsg.type == 'user_audio') {
      var audioid = lastmsg.id;

      db.deleteMediaById(audioid, function(err, media) {
        if (err) {
          console.log('failed to delete media with id :' + id);
          console.log(err);
          return;
        }
      });

    }
  }
}

function updateUserData(data, socketdata, callback) {
  db.updateUserData(socket.user.id, data, function(err) {
      if(err) {
        console.log(err);
        return Jsonerror(socket);
      }
      Object.assign(socket.user, socketdata);
      callback();
  });
}

function createDbRoom(socket, roomdata, callback) {
  db.createRoom(roomdata, function(err, room) {

    if (err) {
      console.log(err);
      return Jsonerror(socket);
    }
    if (!room) {
      console.log('ERROR! Room already exists');
      return Jsonerror(socket, 'roomexists', 'Room already exists!');
    }
    console.log('created room' + 'global');
    if (callback) callback();

  });
}

function Jsonerror(socket, type='stderror', message='Internal error. Try again later.', data = {}) {
  socket.emit('jsonerror', {type: type, message: message, data: data});
}

function Jsonwarn(socket, type='stdwarn', message='Internal error. Try again later.') {
  socket.emit('jsonwarning', {type: type, message: message});
}


});