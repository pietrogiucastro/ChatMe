#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('chatme:server');
 var fs = require('fs');
 var http = require('http');
 var https = require('https');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '60000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var options = {
  key: fs.readFileSync('key.pem'),
  cert: fs.readFileSync('cert.pem')
};

var server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
  ? 'Pipe ' + port
  : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(bind + ' requires elevated privileges');
    process.exit(1);
    break;
    case 'EADDRINUSE':
    console.error(bind + ' is already in use');
    process.exit(1);
    break;
    default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
  ? 'pipe ' + addr
  : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind + ' mode: ' + process.env.NODE_ENV);
}

var connections = [];
var history = {};
var io = require('socket.io').listen(server);
var r_global = 'global';

var rooms = { global: { history : [], users: {} } };
var customrooms = [];

var status = {
  online : {message: 'Online', classname: 'isonline'},
  offline : {message: 'Offline', classname: 'isoffline'},
  busy : {message: 'Busy', classname: 'isbusy'},
  afk : {message: 'AFK', classname: 'isafk'},
  toilet : {message: 'Toilet!', classname: 'istoilet'},
};

io.sockets.on('connection', function(socket) {

  // init connection //
  
  connections.push(socket);

  console.log('a user connected. Online users: ' + connections.length);
  //send history to user

  // =============== //

  //     events      //

  socket.on('disconnect', function() {
    connections.splice(connections.indexOf(socket), 1);

    var roomname = socket.lastroom;

    if (socket.name && roomname) {
      leaveroom(socket, roomname);
    }

    console.log('user disconnected. Online users: ' + connections.length);
  });

  socket.on('define user', function(token) {
    if (!token) {
      Jsonerror(socket);
      return;
    }
    socket.name = token; // change with db call for username
    socket.token = token;
    socket.status = status.online;
    socket.istyping = false;

    socket.emit('initchat');

    socket.on('send message', function(msg) {
      var room = getsocketroom(socket);
      if (!roomexists(room)) {
        console.log('room %s does not exist!', room);
        Jsonerror(socket, 'stderror', 'room does not exist!');
        return;
      }
      console.log('sending message on room ' + JSON.stringify(room));
      var msgobj = {type: 'message', text: msg, time: new Date(), author: socket.name};
      io.sockets.in(room).emit('new message', {msg: msgobj});
      rooms[room].history.push(msgobj);

      rooms[room].history = rooms[room].history.slice(-100);
    });

    socket.on('change_status', function(value) {
      var newstatus = status[value];
      if (!newstatus) return Jsonerror(socket, 'stderror', 'Error: unknown status: ' + value);
      socket.status = newstatus;

      var roomname = getsocketroom(socket);
      
      io.sockets.in(roomname).emit('refresh_user', {name: socket.name, status: newstatus});
    });

    socket.on('typingstatus', function(value) {
      var roomname = getsocketroom(socket);
      if (!roomname) return;
      socket.istyping = !!value;
      rooms[roomname].users[socket.name].istyping = socket.istyping;
      io.sockets.in(roomname).emit('user_typing', {name: socket.name, istyping: socket.istyping});
    });

    socket.on('search rooms', function(roomquery) {
      if (roomquery.length < 3) {
        console.log('roomquery query too short');
        Jsonwarn(socket, 'invalidroomname');
        return;
      }

      var result = {query: roomquery, rooms: []};

      customrooms.forEach(function(thisroom) {
        if (thisroom.match(roomquery) && thisroom != 'global') {
          var haspass = !!rooms[thisroom].password;
          var users = 3;
          result.rooms.push({name: thisroom, haspass: haspass, users: users});
        }
      });

      socket.emit('rooms result', result);

    });

    socket.on('switch room', function(room) {

      if (typeof room.name !== 'string') {
        Jsonerror(socket);
        return;
      }

      if (!room.pass) room.pass = '';

      room.name = room.name ? room.name.replace(/ /g, '') : '';
      switch(room.type) {

        case 'global':
          switchroom(socket, 'global');
          break;

        case 'site':
          switchsiteroom(socket, room.name);
          break;

        case 'custom': //custom room
          switchroom(socket, room.name, room.pass);
          break;

        default:
          Jsonerror(socket);
          return;
      }

    });

    socket.on('join room', function(room) {
      if(!room.name) {
        Jsonerror(socket);
        return;
      }
      switchroom(socket, room.name, room.pass, false, function() {
        socket.emit('set room', {name: room.name, pass: room.pass});
      });
    });


    socket.on('create room', function(room) {
      if (!room.name) {
        Jsonerror(socket);
        return;
      }
      var roomname = room.name.replace(/ /g, '');
      var roompass = room.pass;

      if (roomname.length < 3) {
        console.log(roomname + ": name too short");
        Jsonwarn(socket, 'invalidroomname', 'name is too short!');
        return;
      }
      if (roomname.startsWith('site://') || roomname.startsWith('http://') || roomname.startsWith('https://') || roomname.startsWith('www.')) {
        console.log(roomname + ": invalid name");
        Jsonwarn(socket, 'invalidroomname', 'invalid name!');
        return;
      }
      if (roomexists(roomname)) {
        console.log(roomname + ' room already exists');
        Jsonwarn(socket, 'invalidroomname', 'the room already exists');
        return;
      } // else

      createroom(socket, roomname, roompass);
    });

    socket.on('leave room', function(roomname) {
      leaveroom(roomname);
    });

    // ================ //

  });

  function switchsiteroom(socket, roomname) {
    if (!roomexists(roomname)) initsiteroom(roomname);
    joinroom(socket, roomname, function() {
      console.log('joined site room ' + roomname);
    });
  }

  function switchroom(socket, roomname, sentpass, forcecreate, callback) {
    function checkandset() {

      if (!roomexists(roomname)) {

        if (!forcecreate) {
          console.log('error! room  %s does not exist', roomname);
          Jsonerror(socket, 'stderror', 'room does not exist!');
          return;
        } else {
          initroom(roomname, sentpass);
        }

      } else {

        var roompass = getroom(roomname).password;
        if (roompass && sentpass != roompass) {
          Jsonerror(socket, 'wrongpassword', 'Wrong password!', {name : roomname});
          return;
        }

      }
      joinroom(socket, roomname, function() {
        console.log('joined room ' + roomname);
        if (callback) callback();
      });

    }

    var currentroom = getsocketroom(socket);
    if (currentroom) leaveroom(socket, currentroom, checkandset);
    else checkandset();


  }

  function createroom(socket, roomname, roompass) {
    initroom(roomname, roompass);
    switchroom(socket, roomname, roompass, false, function() {
      console.log('new room created: ' + roomname + ' password: ' + !!roompass);
      socket.emit('set room', {name: roomname, pass: roompass});
    });
  }
  function joinroom(socket, roomname, callback) {
    var userdata = { name: socket.name, status: socket.status, istyping: socket.istyping };
    rooms[roomname].users[socket.name] = userdata;
    io.sockets.in(roomname).emit('refresh_user', userdata);

    console.log(rooms[roomname].users);

    socket.join(roomname, function() {
      socket.emit('history_users', {history: rooms[roomname].history, users: rooms[roomname].users});
      socket.lastroom = roomname;
      if (callback) callback();
    });
  }
  function leaveroom(socket, roomname, callback) {
    socket.leave(roomname, function() {
      io.sockets.in(roomname).emit('remove_user', socket.name);
      delete rooms[roomname].users[socket.name];
      console.log('left room ' + roomname);
      if (callback) callback();

      // delete user joined rooms in db

      // delete room if no users are in the room
      // delete customrooms[romname];
      //
      /*var index = customrooms.indexOf(5);
      if (index + 1) customrooms.splice(index, 1);*/
    });
  }
  function getroom(roomname) {
    return rooms[roomname];
  }

  function getrooms(callback) {
    callback(rooms);
  }
  function initroom(roomname, roompass, callback) {
    rooms[roomname] = { history: [], password: roompass, users: {} };
    customrooms.push(roomname);
    if (callback) callback();
  }

  function initsiteroom(roomname) {
    rooms[roomname] = { history: [], users: {} };
  }
  function getsocketroom(socket) {
    return Object.keys(socket.rooms)[1];
  }

  function roomexists(roomname) {
    return !!rooms[roomname];
  }

  function Jsonerror(socket, type='stderror', message='Internal error. Retry later.', data = {}) {
    socket.emit('jsonerror', {type: type, message: message, data: data});
  }

  function Jsonwarn(socket, type='stdwarn', message='Internal error. Retry later.') {
    socket.emit('jsonwarning', {type: type, message: message});
  }


});